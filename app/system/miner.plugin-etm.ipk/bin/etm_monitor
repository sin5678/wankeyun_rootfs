#!/bin/sh +x

# 该脚本所在的目录
SELF_DIR=${0%/*}

# ETM 工作目录
ETM_SYSTEM_PATH=""

# ETM 磁盘检测配置文件
ETM_DISK_CFG_PATH=""

# ETM 配置文件路径
ETM_CFG_PATH=""

# 日志配置文件路径
LOG_CFG_PATH=""

# 指定ETM使用的deviceid，主要用于远程控制
ETM_DEVICEID=""
ETM_DEVICESN=""

# 指定ETM使用的硬件ID，主要用于license验证
ETM_HARDWAREID=""

# ETM 进程的pid文件
ETM_PID_FILE_PATH=""

# ETM 使用的license
ETM_LICENSE="17061900010000060000889sk320udo2e0i2dssu0y"

# ETM 启动的参数
ETM_ARGS=""

# 监听本地端口
LC_PORT=9000

# ETM与hubble使用的pipe_path
PIPE_PATH=""

# 设置NTFS驱动类型，支持预分配磁盘空间。
# 0: 不支持(ntfs-3g等)
# 1: Tuxera NTFS(tntfs)
# 2: UFSD
ETM_NTFS_TYPE="3"

#指定VOD监听地址。默认为8002。如果改变此参数，必须同时向etm和vod_httpserver传递相同的值
VOD_PORT=""
# VOD启动的参数
VOD_ARGS=""

set_etm_system_path()
{
	ETM_SYSTEM_PATH="${SELF_DIR}/../tmp"
}

set_disk_cfg_path()
{
	ETM_DISK_CFG_PATH="${SELF_DIR}/../conf/thunder_mounts.cfg"
}

set_etm_cfg_path()
{
	ETM_CFG_PATH="${SELF_DIR}/../conf/etm.ini"
}

set_log_cfg_path()
{
	LOG_CFG_PATH="${SELF_DIR}/../conf/log.ini"
}

set_etm_pid_file_path()
{
	ETM_PID_FILE_PATH="${ETM_SYSTEM_PATH}/xunlei.pid"
}

set_pipe_path()
{
	PIPE_PATH="${ETM_SYSTEM_PATH}/etm_hubble_report.pipe"
}

set_devicesn()
{
    max_retrys=3
    while [ ${max_retrys} -gt 0 ] ; do
        ETM_DEVICESN=$(/thunder/bin/readkey sn | grep "data:" | awk '{print $2}')
        [ ${#ETM_DEVICESN} -ge 13 ] && break || {
            sleep 1
            max_retrys=$(expr ${max_retrys} - 1)
        }
    done
}

assemble_etm_args()
{
	if [ -n "$ETM_SYSTEM_PATH" ]; then
		ETM_ARGS="$ETM_ARGS --system_path=$ETM_SYSTEM_PATH"
	fi
	if [ -n "$ETM_DISK_CFG_PATH" ]; then
		ETM_ARGS="$ETM_ARGS --disk_cfg=$ETM_DISK_CFG_PATH"
	fi
	if [ -n "$ETM_CFG_PATH" ]; then
		ETM_ARGS="$ETM_ARGS --etm_cfg=$ETM_CFG_PATH"
	fi
	if [ -n "$LOG_CFG_PATH" ]; then
		ETM_ARGS="$ETM_ARGS --log_cfg=$LOG_CFG_PATH"
	fi
	if [ -n "$ETM_DEVICESN" ]; then
		ETM_ARGS="$ETM_ARGS --devicesn=$ETM_DEVICESN"
	fi
#	if [ -n "$ETM_DEVICEID" ]; then
#		ETM_ARGS="$ETM_ARGS --deviceid=$ETM_DEVICEID"
#	fi
#	if [ -n "$ETM_HARDWAREID" ]; then
#		ETM_ARGS="$ETM_ARGS --hardwareid=$ETM_HARDWAREID"
#	fi
	if [ -n "$ETM_PID_FILE_PATH" ]; then
		ETM_ARGS="$ETM_ARGS --pid_file=$ETM_PID_FILE_PATH"
	fi
	if [ -n "$ETM_LICENSE" ]; then
		ETM_ARGS="$ETM_ARGS --license=$ETM_LICENSE"
	fi
	if [ -n "$PIPE_PATH" ]; then
		ETM_ARGS="$ETM_ARGS --hubble_report_pipe_path=$PIPE_PATH"
	fi
	if [ -n "$ETM_NTFS_TYPE" ]; then
		ETM_ARGS="$ETM_ARGS --ntfs_type=$ETM_NTFS_TYPE"
	fi
	if [ -n "$VOD_PORT" ]; then
		ETM_ARGS="$ETM_ARGS --vod_port=$VOD_PORT"
	fi
	#ETM_ARGS="$ETM_ARGS --enable_freetime_upload=0"
	#ETM_ARGS="$ETM_ARGS --omit_hubble_report=1"
	#ETM_ARGS="$ETM_ARGS --omit_wxdp_report=0"
	ETM_ARGS="$ETM_ARGS --tmp_file_path=$ETM_SYSTEM_PATH"
	ETM_ARGS="$ETM_ARGS --listen_addr=127.0.0.1:9000"
	ETM_ARGS="$ETM_ARGS --max_bt_sub_number=2"
}

assemble_vod_args()
{
	if [ -n "$VOD_PORT" ]; then
		VOD_ARGS="$VOD_ARGS --vod_port=$VOD_PORT"
	fi
	if [ -n "$LC_PORT" ]; then
		VOD_ARGS="$VOD_ARGS --etm_port=$LC_PORT"
	fi
}

assemble_hub_args()
{
	#HUB_ARGS="--wait_resp_timeout=20 --report_interval=5 " 
	#HUB_ARGS="$HUB_ARGS --hubble_server_addr=t05b020vm3.sandai.net:9999 "
	if [ -n "$ETM_SYSTEM_PATH" ]; then
		HUB_ARGS="$HUB_ARGS --system_path=$ETM_SYSTEM_PATH"
	fi
	if [ -n "$PIPE_PATH" ]; then
		HUB_ARGS="$HUB_ARGS --hubble_report_pipe_path=$PIPE_PATH"
	fi

	HUB_ARGS="$HUB_ARGS --hubble_log_cfg=$SELF_DIR/../conf/hubble_log.ini"

	if [ -n "$ETM_CFG_PATH" ]; then
		HUB_ARGS="$HUB_ARGS --etm_cfg=$ETM_CFG_PATH"
	fi

	#HUB_ARGS="$HUB_ARGS --preferred_network_adapter=br-lan"
}

start_etm()
{
	mkdir -p ${ETM_SYSTEM_PATH}
	echo "executing ${SELF_DIR}/etm  $ETM_ARGS"
	( ${SELF_DIR}/etm $ETM_ARGS  $@ & )
	# ( ${SELF_DIR}/vod_httpserver $VOD_ARGS & )
}

stop_etm()
{
	#pid=`cat $ETM_PID_FILE_PATH`
	#echo "stopping etm pid=$pid"
	#kill -9 $pid
	killall -9 etm
}

stop_vod()
{
	echo "stopping vod_httpserver"
	killall vod_httpserver
}

check_etm_status()
{
	#RET_FILE="${ETM_SYSTEM_PATH}/etm_info"
	RET_FILE="/tmp/etm_info"
	time_begin=`date +%s`
	curl -m 60 -o $RET_FILE http://127.0.0.1:${LC_PORT}/getsysinfo &> /dev/null
	if [ $? -ne 0 ]; then
		time_end=`date +%s`
		time_elapsed=$((time_end-time_begin))
		if [ $time_elapsed -ge 60 ]; then 
			#echo "[`date`] service timeout!!!!"
			return 2 # service timeout
   		fi
		#echo "[`date`] sevice not avaliable!!!!"
		return 1 #service not avaliable
	fi
	#echo "[`date`] service OK!!!"
	return 0 #service OK
}

start_hubble()
{
	#( ${SELF_DIR}/hubble $HUB_ARGS $@ & )
	( ${SELF_DIR}/wxdp $HUB_ARGS $@ & )
}

etm_monitor()
{
	timeout_count=0
	while true; do
        if ! pidof wxdp > /dev/null; then
            start_hubble
        fi

		check_etm_status
		check_ret=$?
		if [ $check_ret -eq 1 ]; then
			# stop_vod
			start_etm $@
			timeout_count=0
		elif [ $check_ret -eq 2 ]; then
			timeout_count=$((++timeout_count))
			if [ $timeout_count -ge 5 ]; then
				stop_etm
				start_etm $@
				timeout_count=0
			fi
		else
			timeout_count=0
		fi

		sleep 3
	done
}

apply_default_params()
{
	# if no etm.ini exists, apply default speed limit
	if [ ! -e "${ETM_CFG_PATH}" ]; then
		echo '[network]' > "${ETM_CFG_PATH}"
		echo 'local_down_speed_limit=1000' >> "${ETM_CFG_PATH}"
	fi
}

ulimit -s 2048
ulimit -v 204800
set_etm_system_path
set_disk_cfg_path
set_etm_cfg_path
set_log_cfg_path
set_pipe_path
set_etm_pid_file_path
set_devicesn

assemble_etm_args
assemble_vod_args
assemble_hub_args

#apply_default_params

etm_monitor $@

